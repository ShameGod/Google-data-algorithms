class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        return getHashMapIntersection(nums1, nums2);
    }

    
    private int[] getHashMapIntersection(int[] nums1, int[] nums2){
        int[] smallestList;
        int[] tallestList;
        HashMap<Integer, Integer> restultHashMap = new HashMap<>();
        if(nums1.length >nums2.length){
            smallestList = nums2;
            tallestList  = nums1;
        }else{
            smallestList = nums1;
            tallestList  = nums2;
        }
        for(int i=0; i<smallestList.length; i++){
            if(restultHashMap.containsKey(smallestList[i])){
                restultHashMap.put(smallestList[i], restultHashMap.get(smallestList[i])+1);
            }else{restultHashMap.put(smallestList[i], 1);}
        }
        return hashMapToArray(restultHashMap, tallestList);
    }
    
    private int[] hashMapToArray(HashMap<Integer, Integer> hashMap, int[] nums){
        List<Integer> resultList = new ArrayList<Integer>();
        for(int i=0; i<nums.length; i++){
            if(hashMap.containsKey(nums[i]) && hashMap.get(nums[i])>0){
                resultList.add(nums[i]);
                hashMap.put(nums[i], hashMap.get(nums[i])-1);
            }
        }
        return resultList.stream().mapToInt(Integer::intValue).toArray();
    }
}
